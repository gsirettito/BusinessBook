<Fluent:RibbonWindow x:Name="wind" x:Class="Bussines.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:Fluent="clr-namespace:Fluent;assembly=Fluent"
        xmlns:converters="clr-namespace:Bussines.Converters"
        xmlns:converterss="clr-namespace:SiretT.Converters"
        xmlns:local="clr-namespace:Bussines"
        xmlns:lbs="clr-namespace:SelectionExample"
        Title="MainWindow" Height="450" Width="825" WindowState="Maximized">
    <Fluent:RibbonWindow.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <converterss:LogicToVisibilityConverter x:Key="LogicConverter" LogicOperator="OR"/>
        <converters:TotalConverter x:Key="totalConverter"/>
        <converterss:IsSelectedAllListViewConverter x:Key="SelectedAll"/>
        <converters:TotalConverter_MB x:Key="totalConverter_MB"/>
        <converters:EmptyEntrancesConverter x:Key="emptyEntrances"/>
        <converterss:EqualsToFalseConverter x:Key="EquFalse"/>
        <Color x:Key="Accent">#FF2B9A35</Color>
        <SolidColorBrush x:Key="PrimaryColor" Color="#FF2B9A05"/>
        <Style x:Key="buttonStye" TargetType="{x:Type Button}">
            <Setter Property="FontFamily" Value="Segoe MDL2 Assets"/>
            <Setter Property="FontSize" Value="16"/>
        </Style>

        <DataTemplate x:Key="FirstColumnHeaderTemplate">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>

                <CheckBox VerticalAlignment="Center"
                          SnapsToDevicePixels="True"
                          Checked="CheckColumnAll_Checked"
                          Unchecked="CheckColumnAll_Unchecked"/>
                <TextBlock Grid.Column="1" Margin="10,0" Text="{Binding}"
                                               FontSize="13"
                                               HorizontalAlignment="Left"
                                               TextTrimming="CharacterEllipsis"
                                               SnapsToDevicePixels="True"/>
            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="FirstColumnCellTemplate">
            <Grid MouseLeftButtonDown="Border_MouseLeftButtonDown">
                <Grid.ContextMenu>
                    <ContextMenu>
                        <MenuItem Click="EditEntrance_Click" Header="Editar entrada"/>
                        <MenuItem Click="EditSolution_Click" Header="Editar salida"/>
                        <MenuItem Click="Delete_Click" Header="Eliminar" IsEnabled="{Binding IsChecked, ElementName=expert}"/>
                    </ContextMenu>
                </Grid.ContextMenu>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="18"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <CheckBox VerticalAlignment="Center"
                          IsChecked="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}}}"
                                      Margin="0,0,3,0"
                                      SnapsToDevicePixels="True">
                    <CheckBox.Visibility>
                        <MultiBinding Converter="{StaticResource LogicConverter}">
                            <Binding Path="IsChecked" RelativeSource="{RelativeSource Self}"/>
                            <Binding Path="IsMouseOver" RelativeSource="{RelativeSource AncestorType={x:Type ListViewItem}}"/>
                        </MultiBinding>
                    </CheckBox.Visibility>
                </CheckBox>
                <TextBlock Grid.Column="1" HorizontalAlignment="Left"
                           Foreground="#000"
                           TextTrimming="CharacterEllipsis"
                           Text="{Binding Path=Equip.Name}"
                           SnapsToDevicePixels="True"/>
            </Grid>
        </DataTemplate>

        <Style TargetType="{x:Type local:ContextFilter}">
            <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
            <Setter Property="Background" Value="Yellow" />
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="BorderBrush" Value="Red"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="2"/>
            <Setter Property="MinWidth" Value="150" />
            <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type local:ContextFilter}">
                        <Grid Margin="4">
                            <Border x:Name="ContextMenuBorder"
                                Background="{DynamicResource PopupBackground}"
                                BorderBrush="{DynamicResource WindowBorderActive}"
                                BorderThickness="1">
                                <ScrollViewer Name="ContextMenuScrollViewer"
                                              VerticalScrollBarVisibility="Disabled"
                                              Margin="{TemplateBinding Padding}">
                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                            <Rectangle 
                                            Name="OpaqueRect"
                                            Height="{Binding ElementName=ContextMenuBorder,Path=ActualHeight}" 
                                            Width="{Binding ElementName=ContextMenuBorder,Path=ActualWidth}" 
                                            Fill="{Binding ElementName=ContextMenuBorder,Path=Background}" />
                                        </Canvas>
                                        <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Fluent:RibbonWindow.Resources>
    <DockPanel>
        <DockPanel DockPanel.Dock="Top">
            <Fluent:Ribbon DockPanel.Dock="Top">
                <!--Backstage-->
                <Fluent:Ribbon.Menu>
                    <Fluent:Backstage Background="{StaticResource PrimaryColor}">
                        <Fluent:BackstageTabControl>
                            <Fluent:BackstageTabItem Header="Add entrance"/>
                            <Fluent:BackstageTabItem Header="Print"/>
                            <Fluent:Button Header="Blue" Icon="res\help.png"/>
                        </Fluent:BackstageTabControl>
                    </Fluent:Backstage>
                </Fluent:Ribbon.Menu>

                <Fluent:Ribbon.QuickAccessItems>
                    <Fluent:QuickAccessMenuItem IsChecked="True" Header="Undo" Icon="pack://application:,,,/Bussines;component/res/undo.png">
                        <Fluent:Button Header="{Binding Header, RelativeSource={RelativeSource AncestorType=Fluent:QuickAccessMenuItem}}" Icon="{Binding Icon, RelativeSource={RelativeSource AncestorType=Fluent:QuickAccessMenuItem}}"/>
                    </Fluent:QuickAccessMenuItem>
                    <Fluent:QuickAccessMenuItem IsChecked="True" Header="Redo" Icon="pack://application:,,,/Bussines;component/res/redo.png">
                        <Fluent:Button Header="{Binding Header, RelativeSource={RelativeSource AncestorType=Fluent:QuickAccessMenuItem}}" Icon="{Binding Icon, RelativeSource={RelativeSource AncestorType=Fluent:QuickAccessMenuItem}}"/>
                    </Fluent:QuickAccessMenuItem>
                </Fluent:Ribbon.QuickAccessItems>
                <!--Tabs-->
                <Fluent:RibbonTabItem ReduceOrder="Default,Default,Default,Large,Large,Large,Other,Other,Other" Header="Start">
                    <Fluent:RibbonGroupBox Header="Add">
                        <Fluent:RibbonToolBar>
                            <Fluent:RibbonToolBar.LayoutDefinitions>
                                <Fluent:RibbonToolBarLayoutDefinition Size="Large">
                                    <Fluent:RibbonToolBarRow>
                                        <Fluent:RibbonToolBarControlDefinition Target="fileAdd" Width="56" Size="Large" />
                                    </Fluent:RibbonToolBarRow>
                                </Fluent:RibbonToolBarLayoutDefinition>
                            </Fluent:RibbonToolBar.LayoutDefinitions>
                            <Fluent:Button x:Name="fileAdd" SizeDefinition="Large" Header="Add entrance" Click="Add_Click">
                                <Fluent:Button.Icon>
                                    <Image Source="res/smal-document-add_16x16.png"/>
                                </Fluent:Button.Icon>
                                <Fluent:Button.LargeIcon>
                                    <Image Source="res/large-symbol-add_32x32.png"/>
                                </Fluent:Button.LargeIcon>
                            </Fluent:Button>
                        </Fluent:RibbonToolBar>
                    </Fluent:RibbonGroupBox>
                    <Fluent:RibbonGroupBox Header="Organize">
                        <Fluent:RibbonToolBar>
                            <Fluent:RibbonToolBar.LayoutDefinitions>
                                <Fluent:RibbonToolBarLayoutDefinition Size="Large">
                                    <Fluent:RibbonToolBarRow>
                                        <Fluent:RibbonToolBarControlDefinition Target="remove" Width="56" Size="Large"/>
                                    </Fluent:RibbonToolBarRow>
                                </Fluent:RibbonToolBarLayoutDefinition>
                            </Fluent:RibbonToolBar.LayoutDefinitions>
                            <Fluent:Button x:Name="remove" IsEnabled="{Binding SelectedItems.Count, ConverterParameter=0, Converter={StaticResource EquFalse}, ElementName=list, Mode=OneWay}" SizeDefinition="Large" Header="Remove entrance" Click="remove_Click">
                                <Fluent:Button.Icon>
                                    <Image Source="res/smal-symbol-cancel_16x16.png"/>
                                </Fluent:Button.Icon>
                                <Fluent:Button.LargeIcon>
                                    <Image Source="res/large-symbol-cancel_32x32.png"/>
                                </Fluent:Button.LargeIcon>
                            </Fluent:Button>
                        </Fluent:RibbonToolBar>
                    </Fluent:RibbonGroupBox>
                    <Fluent:RibbonGroupBox Header="Selection">
                        <Fluent:RibbonToolBar>
                            <Fluent:RibbonToolBar.LayoutDefinitions>
                                <Fluent:RibbonToolBarLayoutDefinition>
                                    <Fluent:RibbonToolBarRow>
                                        <Fluent:RibbonToolBarControlDefinition Target="selectAll" Size="Middle"/>
                                    </Fluent:RibbonToolBarRow>
                                    <Fluent:RibbonToolBarRow>
                                        <Fluent:RibbonToolBarControlDefinition Target="selectNone" Size="Middle"/>
                                    </Fluent:RibbonToolBarRow>
                                    <Fluent:RibbonToolBarRow>
                                        <Fluent:RibbonToolBarControlDefinition Target="selectInvert" Size="Middle"/>
                                    </Fluent:RibbonToolBarRow>
                                </Fluent:RibbonToolBarLayoutDefinition>
                            </Fluent:RibbonToolBar.LayoutDefinitions>
                            <Fluent:Button x:Name="selectAll" IsEnabled="{Binding Items.Count, ConverterParameter=0, Converter={StaticResource EquFalse}, ElementName=list, Mode=OneWay}" Header="Select all" SizeDefinition="Middle, Small, Small" Click="selectAll_Click">
                                <Fluent:Button.Icon>
                                    <Image Source="res/smal-select-all_16x16.png"/>
                                </Fluent:Button.Icon>
                            </Fluent:Button>
                            <Fluent:Button x:Name="selectNone" IsEnabled="{Binding Items.Count, ConverterParameter=0, Converter={StaticResource EquFalse}, ElementName=list, Mode=OneWay}" Header="Select none" SizeDefinition="Middle, Small, Small" Click="selectNone_Click">
                                <Fluent:Button.Icon>
                                    <Image Source="res/smal-select-invert_16x16.png"/>
                                </Fluent:Button.Icon>
                            </Fluent:Button>
                            <Fluent:Button x:Name="selectInvert" IsEnabled="{Binding Items.Count, ConverterParameter=0, Converter={StaticResource EquFalse}, ElementName=list, Mode=OneWay}" Header="Invert selection" SizeDefinition="Middle, Small, Small" Click="selectInvert_Click">
                                <Fluent:Button.Icon>
                                    <Image Source="res/smal-select-none_16x16.png"/>
                                </Fluent:Button.Icon>
                            </Fluent:Button>
                        </Fluent:RibbonToolBar>
                    </Fluent:RibbonGroupBox>
                </Fluent:RibbonTabItem>
                <Fluent:RibbonTabItem ReduceOrder="Default,Default,Default,Large,Large,Large,Other,Other,Other" Header="Option">
                    <Fluent:RibbonGroupBox Header="Options">
                        <Fluent:CheckBox Header="Context Menu" SizeDefinition="Middle, Small, Small" />
                    </Fluent:RibbonGroupBox>
                </Fluent:RibbonTabItem>
            </Fluent:Ribbon>
            <Grid DockPanel.Dock="Top" Margin="4">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="auto"/>
                </Grid.ColumnDefinitions>
                <CheckBox x:Name="expert">Modo experto</CheckBox>
                <GridSplitter Width="2"/>
                <Fluent:TextBox x:Name="filter" Grid.Column="1" Width="200" MinWidth="120" Header="Filter" SizeDefinition="Middle, Small, Small" TextChanged="filter_TextInput">
                    <Fluent:TextBox.Icon>
                        <Image Source="res/smal-filter_16x16.png"/>
                    </Fluent:TextBox.Icon>
                </Fluent:TextBox>
            </Grid>
            <Fluent:StatusBar DockPanel.Dock="Bottom" Background="{StaticResource PrimaryColor}">
                <Separator HorizontalAlignment="Left"/>
                <Fluent:StatusBarItem HorizontalAlignment="Left" Value="10" Title="Items count">
                    <TextBlock>
                <Run Text="{Binding Items.Count, ElementName=list, Mode=OneWay}"/>
                entradas
                $<Run>
                    <Run.Text>
                        <MultiBinding Converter="{StaticResource totalConverter_MB}">
                            <Binding Path="Items.Count" ElementName="list" Mode="OneWay"/>
                            <Binding Path="Items" ElementName="list" Mode="OneWay"/>
                        </MultiBinding>
                    </Run.Text>
                </Run>
                    </TextBlock>
                </Fluent:StatusBarItem>
                <Separator HorizontalAlignment="Left"/>
                <Fluent:StatusBarItem HorizontalAlignment="Left" Value="150" Title="Selected items count">
                    <TextBlock x:Name="elems">
                        <TextBlock.Resources>
                            <converterss:EqualsToFalseConverterNippleConverter x:Key="nippleEqualsToFalse"/>
                        </TextBlock.Resources>
                        <TextBlock.Visibility>
                            <Binding Path="SelectedItems.Count" ConverterParameter="0" ElementName="list">
                                <Binding.Converter>
                                    <converterss:BooleanToVisibilityNippleConverter NippleConverter="{StaticResource nippleEqualsToFalse}"/>
                                </Binding.Converter>
                            </Binding>
                        </TextBlock.Visibility>
                <Run Text="{Binding SelectedItems.Count, ElementName=list, Mode=OneWay}"/>
                entradas seleccionadas
                $<Run x:Name="selc"/>
                    </TextBlock>
                </Fluent:StatusBarItem>
                <Separator HorizontalAlignment="Left"/>
                <Fluent:StatusBarItem HorizontalAlignment="Left" Value="10" Title="Items empty">
                    <TextBlock>
                        <Run>
                            <Run.Text>
                                <MultiBinding Converter="{StaticResource emptyEntrances}">
                                    <Binding Path="Items.Count" ElementName="list" Mode="OneWay"/>
                                    <Binding Path="Items" ElementName="list" Mode="OneWay"/>
                                </MultiBinding>
                            </Run.Text>
                        </Run>
                        entradas sin cerrar
                    </TextBlock>
                </Fluent:StatusBarItem>
            </Fluent:StatusBar>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto" MinWidth="228" MaxWidth="520"/>
                </Grid.ColumnDefinitions>
                <Grid Grid.Column="1">
                    <TextBlock Margin="20,10" TextTrimming="CharacterEllipsis" TextWrapping="Wrap" MaxWidth="{Binding Path=ActalWidth, RelativeSource={RelativeSource AncestorType=Grid}}">
                        <Run FontSize="16" Text="{Binding SelectedItem.Equip.Name, ElementName=list}"/>
                        <LineBreak/>
                        <Run Text="{Binding SelectedItem.Equip.Client, ElementName=list}"/>
                        <LineBreak/>
                        Entrance date time:
                        <InlineUIContainer>
                            <Label Padding="0" Content="{Binding SelectedItem.EntranceDateTime, ElementName=list, StringFormat=\{0:D\}}"/>
                            </InlineUIContainer>
                        <LineBreak/>
                        Solution date time:
                        <InlineUIContainer>
                            <Label Padding="0" Content="{Binding SelectedItem.Equip.Solution.SolutionDateTime, ElementName=list, StringFormat=\{0:g\}}"/>
                            </InlineUIContainer>
                        <LineBreak/>
                        <Span>
                            <Underline>Problema:</Underline>
                            <LineBreak/>
                            <Run Text="{Binding ElementName=list, Path=SelectedItem.Equip.Problem}"/>
                        </Span>
                        <LineBreak/>
                        <LineBreak/>
                        <Span>
                            <Underline>Solución:</Underline>
                            <LineBreak/>
                            <Run Text="{Binding ElementName=list, Path=SelectedItem.Equip.Solution.Description}"/>
                        </Span>
                    </TextBlock>
                </Grid>
                <GridSplitter Width="2" Grid.Column="1" HorizontalAlignment="Left"/>
                <ListView x:Name="list" lbs:ListBoxSelector.Enabled="True" ItemsSource="{Binding Items}" SelectedItem="{Binding SelectedItem}">
                    <ListView.View>
                        <GridView x:Name="gview">
                            <GridView.ColumnHeaderContextMenu>
                                <ContextMenu>
                                    <MenuItem IsCheckable="True">
                                        <MenuItem.Header>
                                            <Calendar/>
                                        </MenuItem.Header>
                                    </MenuItem>
                                    <MenuItem Header="Cliente" IsCheckable="True"></MenuItem>
                                    <MenuItem Header="Fecha de entrada" IsCheckable="True"></MenuItem>
                                    <MenuItem Header="Fecha de salida" IsCheckable="True"></MenuItem>
                                    <MenuItem Header="Costo" IsCheckable="True"></MenuItem>
                                </ContextMenu>
                            </GridView.ColumnHeaderContextMenu>
                            <local:CustomGridViewColumn DisplaySource="{Binding Equip.Name}" DisplayMemberBinding="{Binding Equip.Name}" HeaderTemplate="{StaticResource FirstColumnHeaderTemplate}" Width="100">
                                <GridViewColumn.Header>
                                    <GridViewColumnHeader Tag="Equip.Name" Click="GridViewColumnHeader_Click">Equip</GridViewColumnHeader>
                                </GridViewColumn.Header>
                                <local:CustomGridViewColumn.FilterMenu>
                                    <local:ContextFilter Tag="Equip.Name">
                                        <MenuItem Header="A - H" IsCheckable="True" Checked="MenuItem_Checked" Unchecked="MenuItem_Checked" Tag="AH"/>
                                        <MenuItem Header="I - P" IsCheckable="True" Checked="MenuItem_Checked" Unchecked="MenuItem_Checked" Tag="IP"/>
                                        <MenuItem Header="Q - Z" IsCheckable="True" Checked="MenuItem_Checked" Unchecked="MenuItem_Checked" Tag="QZ"/>
                                    </local:ContextFilter>
                                </local:CustomGridViewColumn.FilterMenu>
                            </local:CustomGridViewColumn>
                            <local:CustomGridViewColumn DisplaySource="{Binding Equip.Client}" DisplayMemberBinding="{Binding Equip.Client}">
                                <GridViewColumn.Header>
                                    <GridViewColumnHeader Tag="Equip.Client" Click="GridViewColumnHeader_Click">Client</GridViewColumnHeader>
                                </GridViewColumn.Header>
                                <local:CustomGridViewColumn.FilterMenu>
                                    <ContextMenu Tag="Equip.Client">
                                        <MenuItem Header="A - H" IsCheckable="True" Checked="MenuItem_Checked" Unchecked="MenuItem_Checked" Tag="AH"/>
                                        <MenuItem Header="I - P" IsCheckable="True" Checked="MenuItem_Checked" Unchecked="MenuItem_Checked" Tag="IP"/>
                                        <MenuItem Header="Q - Z" IsCheckable="True" Checked="MenuItem_Checked" Unchecked="MenuItem_Checked" Tag="QZ"/>
                                    </ContextMenu>
                                </local:CustomGridViewColumn.FilterMenu>
                            </local:CustomGridViewColumn>
                            <local:CustomGridViewColumn DisplayMemberBinding="{Binding EntranceDateTime}">
                                <GridViewColumn.Header>
                                    <GridViewColumnHeader x:Name="sortByEntranceDateTime" Tag="EntranceDateTime" Click="GridViewColumnHeader_Click">Entrance date time</GridViewColumnHeader>
                                </GridViewColumn.Header>
                                <local:CustomGridViewColumn.FilterMenu>
                                    <ContextMenu Tag="EntranceDateTime">
                                        <MenuItem IsCheckable="True" Checked="MenuItem_Checked" Unchecked="MenuItem_Checked" Tag="AH">
                                            <MenuItem.Header>
                                                <Calendar/>
                                            </MenuItem.Header>
                                        </MenuItem>
                                        <MenuItem Header="Hace mucho tiempo" IsCheckable="True" Checked="MenuItem_Checked" Unchecked="MenuItem_Checked" Tag="AH"/>
                                        <MenuItem Header="Al principio de este año" IsCheckable="True" Checked="MenuItem_Checked" Unchecked="MenuItem_Checked" Tag="IP"/>
                                        <MenuItem Header="Al principio de esta semana" IsCheckable="True" Checked="MenuItem_Checked" Unchecked="MenuItem_Checked" Tag="IP"/>
                                        <MenuItem Header="Ayer" IsCheckable="True" Checked="MenuItem_Checked" Unchecked="MenuItem_Checked" Tag="QZ"/>
                                        <MenuItem Header="Hoy" IsCheckable="True" Checked="MenuItem_Checked" Unchecked="MenuItem_Checked" Tag="QZ"/>
                                    </ContextMenu>
                                </local:CustomGridViewColumn.FilterMenu>
                            </local:CustomGridViewColumn>
                            <local:CustomGridViewColumn DisplayMemberBinding="{Binding Equip.Solution.SolutionDateTime}">
                                <GridViewColumn.Header>
                                    <GridViewColumnHeader Tag="Equip.Solution.SolutionDateTime" Click="GridViewColumnHeader_Click">Solution date time</GridViewColumnHeader>
                                </GridViewColumn.Header>
                                <local:CustomGridViewColumn.FilterMenu>
                                    <ContextMenu Tag="Equip.Solution.SolutionDateTime">
                                        <MenuItem IsCheckable="True" Checked="MenuItem_Checked" Unchecked="MenuItem_Checked" Tag="AH">
                                            <MenuItem.Header>
                                                <Calendar/>
                                            </MenuItem.Header>
                                        </MenuItem>
                                        <MenuItem Header="Hace mucho tiempo" IsCheckable="True" Checked="MenuItem_Checked" Unchecked="MenuItem_Checked" Tag="AH"/>
                                        <MenuItem Header="Al principio de este año" IsCheckable="True" Checked="MenuItem_Checked" Unchecked="MenuItem_Checked" Tag="IP"/>
                                        <MenuItem Header="Al principio de esta semana" IsCheckable="True" Checked="MenuItem_Checked" Unchecked="MenuItem_Checked" Tag="IP"/>
                                        <MenuItem Header="Ayer" IsCheckable="True" Checked="MenuItem_Checked" Unchecked="MenuItem_Checked" Tag="QZ"/>
                                        <MenuItem Header="Hoy" IsCheckable="True" Checked="MenuItem_Checked" Unchecked="MenuItem_Checked" Tag="QZ"/>
                                    </ContextMenu>
                                </local:CustomGridViewColumn.FilterMenu>
                            </local:CustomGridViewColumn>
                            <local:CustomGridViewColumn DisplayMemberBinding="{Binding Equip.Solution.Cost}">
                                <GridViewColumn.Header>
                                    <GridViewColumnHeader Tag="Equip.Solution.Cost" Click="GridViewColumnHeader_Click">Cost</GridViewColumnHeader>
                                </GridViewColumn.Header>
                                <local:CustomGridViewColumn.FilterMenu>
                                    <ContextMenu Tag="Equip.Solution.Cost">
                                        <MenuItem Header="A - H" IsCheckable="True" Checked="MenuItem_Checked" Unchecked="MenuItem_Checked" Tag="AH"/>
                                        <MenuItem Header="I - P" IsCheckable="True" Checked="MenuItem_Checked" Unchecked="MenuItem_Checked" Tag="IP"/>
                                        <MenuItem Header="Q - Z" IsCheckable="True" Checked="MenuItem_Checked" Unchecked="MenuItem_Checked" Tag="QZ"/>
                                    </ContextMenu>
                                </local:CustomGridViewColumn.FilterMenu>
                            </local:CustomGridViewColumn>
                        </GridView>
                    </ListView.View>
                </ListView>
            </Grid>
            <Button>Hello
                <Button.ContextMenu>
                    <local:ContextFilter>
                        <local:FilterItem IsCheckable="True">
                            <local:FilterItem.Header>
                                FilterItem1
                            </local:FilterItem.Header>
                            <local:FilterItem.Content>
                                <Calendar Width="170" Height="137"/>
                            </local:FilterItem.Content>
                        </local:FilterItem>
                        <local:FilterItem Header="uno"/>
                        <ContextMenu.ItemTemplate>
                            <DataTemplate>
                                <Border Background="Red" BorderBrush="Brown" BorderThickness="1">
                                    <ContentControl Content="{Binding Equip.Name}"/>
                                </Border>
                            </DataTemplate>
                        </ContextMenu.ItemTemplate>
                    </local:ContextFilter>
                </Button.ContextMenu>
            </Button>
        </DockPanel>
    </DockPanel>
</Fluent:RibbonWindow>
